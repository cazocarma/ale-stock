services:
  db:
    image: postgres:16
    container_name: ale-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: alestock
    volumes:
      - ./db/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:9.9
    container_name: ale-pgadmin
    depends_on:
      db:
        condition: service_started
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"

  api:
    build:
      context: ./api/AleStock.Api
      dockerfile: Dockerfile
    container_name: ale-api
    depends_on:
      db:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=alestock;Username=postgres;Password=postgres
    ports:
      - "8080:8080"

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: ale-web
    volumes:
      - ./web:/app        # permite live reload
      - /app/node_modules # evita conflictos entre host y contenedor
    ports:
      - "4200:4200"
    depends_on:
      - api
  #web:
  #  build:
  #    context: ./web
  #    dockerfile: Dockerfile
  #  container_name: ale-web
  #  restart: always
  #  ports:
  #    - "4200:80"
  #  depends_on:
  #    - api